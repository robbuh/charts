apiVersion: {{ template "plone.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "plone.fullname" . }}
  labels: {{- include "plone.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "plone.matchLabels" . | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{ toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels: {{- include "plone.labels" . | nindent 8 }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      hostAliases:
        - ip: "127.0.0.1"
          hostnames:
            - "status.localhost"
      {{- if .Values.affinity }}
      affinity: {{- include "plone.tplValue" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "plone.tplValue" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "plone.tplValue" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      containers:
        - name: plone
          image: {{ template "plone.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            - name: SITE
              value: {{ .Values.ploneSite | quote }}
            - name: ADDONS
              value: {{ .Values.ploneAddons | quote }}
            - name: VERSIONS
              value: {{ .Values.ploneAddonsVersion | quote }}
            - name: DEVELOP
              value: {{ .Values.ploneDevelop | quote }}
            - name: PROFILES
              value: {{ .Values.ploneProfiles | quote }}
            - name: ZCML
              value: {{ .Values.ploneZCML | quote }}
          ports:
            - name: http
              containerPort: 8080
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: /
              port: {{ ternary "https" "http" .Values.healthcheckHttps }}
              {{- if .Values.healthcheckHttps }}
              scheme: HTTPS
              {{- end }}
              {{- if .Values.livenessProbeHeaders }}
              httpHeaders: {{- toYaml .Values.livenessProbeHeaders | nindent 16 }}
              {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              path: /
              port: {{ ternary "https" "http" .Values.healthcheckHttps }}
              {{- if .Values.healthcheckHttps }}
              scheme: HTTPS
              {{- end }}
              {{- if .Values.readinessProbeHeaders }}
              httpHeaders: {{- toYaml .Values.readinessProbeHeaders | nindent 16 }}
              {{- end }}
          {{- end }}
          volumeMounts:
            - mountPath: /data/
              name: plone-data
              #subPath: plone
            {{- if .Values.extraVolumeMounts }}
            {{- include "plone.tplValue" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          resources: {}
      volumes:
        - name: plone-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "plone.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{ end }}
        {{- if .Values.extraVolumes }}
        {{- include "plone.tplValue" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
      restartPolicy: Always
status: {}
